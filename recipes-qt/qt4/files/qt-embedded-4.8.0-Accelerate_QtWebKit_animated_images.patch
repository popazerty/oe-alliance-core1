diff --git a/src/3rdparty/javascriptcore/JavaScriptCore/wtf/TCSystemAlloc.cpp b/src/3rdparty/javascriptcore/JavaScriptCore/wtf/TCSystemAlloc.cpp
index 6ed9bde..8540b32 100644
--- a/src/3rdparty/javascriptcore/JavaScriptCore/wtf/TCSystemAlloc.cpp
+++ b/src/3rdparty/javascriptcore/JavaScriptCore/wtf/TCSystemAlloc.cpp
@@ -458,7 +458,7 @@ void TCMalloc_SystemRelease(void* start, size_t length)
   size_t new_length = new_end - new_start;
   void* newAddress = (void*) new_start;//mmap(reinterpret_cast<char*>(new_start), new_length, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1, 0);
    // If the mmap failed then that's ok, we just won't return the memory to the system.
-  ASSERT_UNUSED(newAddress, newAddress == new_start || newAddress == reinterpret_cast<void*>(MAP_FAILED));
+  ASSERT_UNUSED(newAddress, newAddress == reinterpret_cast<void*>(new_start) || newAddress == reinterpret_cast<void*>(MAP_FAILED));
 }
 
 #elif HAVE(VIRTUALALLOC)
diff --git a/src/3rdparty/webkit/Source/WebCore/platform/graphics/BitmapImage.cpp b/src/3rdparty/webkit/Source/WebCore/platform/graphics/BitmapImage.cpp
index 7cdb43d..a3abe6f 100644
--- a/src/3rdparty/webkit/Source/WebCore/platform/graphics/BitmapImage.cpp
+++ b/src/3rdparty/webkit/Source/WebCore/platform/graphics/BitmapImage.cpp
@@ -95,7 +95,7 @@ void BitmapImage::destroyDecodedDataIfNecessary(bool destroyAll)
 {
     // Animated images >5MB are considered large enough that we'll only hang on
     // to one frame at a time.
-    static const unsigned cLargeAnimationCutoff = 5242880;
+    static const unsigned cLargeAnimationCutoff = 67108864; // 64Mb
     if (m_frames.size() * frameBytes(m_size) > cLargeAnimationCutoff)
         destroyDecodedData(destroyAll);
 }
diff --git a/src/3rdparty/webkit/Source/WebCore/platform/graphics/qt/ImageDecoderQt.cpp b/src/3rdparty/webkit/Source/WebCore/platform/graphics/qt/ImageDecoderQt.cpp
index e66511d..d7cb710 100644
--- a/src/3rdparty/webkit/Source/WebCore/platform/graphics/qt/ImageDecoderQt.cpp
+++ b/src/3rdparty/webkit/Source/WebCore/platform/graphics/qt/ImageDecoderQt.cpp
@@ -48,12 +48,14 @@ ImageDecoder* ImageDecoder::create(const SharedBuffer& data, ImageSource::AlphaO
 
 ImageDecoderQt::ImageDecoderQt(ImageSource::AlphaOption alphaOption, ImageSource::GammaAndColorProfileOption gammaAndColorProfileOption)
     : ImageDecoder(alphaOption, gammaAndColorProfileOption)
-    , m_repetitionCount(cAnimationNone)
+    , m_repetitionCount(cAnimationNone), m_animation(0)
 {
 }
 
 ImageDecoderQt::~ImageDecoderQt()
 {
+    if (m_animation)
+        delete m_animation;
 }
 
 void ImageDecoderQt::setData(SharedBuffer* data, bool allDataReceived)
@@ -173,12 +175,12 @@ void ImageDecoderQt::internalReadImage(size_t frameIndex)
 {
     ASSERT(m_reader);
 
-    if (m_reader->supportsAnimation())
-        m_reader->jumpToImage(frameIndex);
-    else if (frameIndex) {
-        setFailed();
-        return clearPointers();
-    }
+    //if (m_reader->supportsAnimation())
+    //    m_reader->jumpToImage(frameIndex);
+    //else if (frameIndex) {
+    //    setFailed();
+    //    return clearPointers();
+    //}
 
     if (!internalHandleCurrentImage(frameIndex))
       setFailed();
@@ -196,16 +198,28 @@ bool ImageDecoderQt::internalHandleCurrentImage(size_t frameIndex)
 {
     QPixmap pixmap;
     bool pixmapLoaded = false;
+    bool fastAnimationPath = false;
     const int imageCount = m_reader->imageCount();
     if (imageCount == 0 || imageCount == 1)
         pixmapLoaded = pixmap.loadFromData((const uchar*)(m_data->data()), m_data->size(), m_format);
     else {
-        QImage img;
-        const bool imageLoaded = m_reader->read(&img);
-        if (imageLoaded) {
-            pixmap = QPixmap::fromImage(img);
-            pixmapLoaded = true;
-        }
+        if (!m_animation)
+            m_animation = new QPixmap();
+
+        // First try the fast path
+        if (m_animation)
+            pixmapLoaded = m_animation->loadFromAnimationData((const uchar*)m_data->data(), m_data->size(), frameIndex);
+
+        // If fast path didn't work then fall back to Qt's default handler
+        if (!pixmapLoaded) {
+            QImage img;
+            const bool imageLoaded = m_reader->read(&img);
+            if (imageLoaded) {
+                pixmap = QPixmap::fromImage(img);
+                pixmapLoaded = true;
+            }
+        } else
+            fastAnimationPath = true;
     }
 
     if (!pixmapLoaded) {
@@ -220,7 +234,12 @@ bool ImageDecoderQt::internalHandleCurrentImage(size_t frameIndex)
     buffer->setOriginalFrameRect(m_reader->currentImageRect());
     buffer->setStatus(ImageFrame::FrameComplete);
     buffer->setDuration(m_reader->nextImageDelay());
-    buffer->setPixmap(pixmap);
+
+    if (!fastAnimationPath)
+        buffer->setPixmap(pixmap);
+    else
+        buffer->setPixmap(m_animation->copy());
+
     return true;
 }
 
diff --git a/src/3rdparty/webkit/Source/WebCore/platform/graphics/qt/ImageDecoderQt.h b/src/3rdparty/webkit/Source/WebCore/platform/graphics/qt/ImageDecoderQt.h
index 3e421c3..48a9abd 100644
--- a/src/3rdparty/webkit/Source/WebCore/platform/graphics/qt/ImageDecoderQt.h
+++ b/src/3rdparty/webkit/Source/WebCore/platform/graphics/qt/ImageDecoderQt.h
@@ -71,6 +71,9 @@ private:
     OwnPtr<QBuffer> m_buffer;
     OwnPtr<QImageReader> m_reader;
     mutable int m_repetitionCount;
+
+    // The associated IDirectFBVideoProvider has to remain alive across decoded frames
+    QPixmap *m_animation;
 };
 
 
diff --git a/src/gui/image/qpixmap.cpp b/src/gui/image/qpixmap.cpp
index 7071579..ebe9806 100644
--- a/src/gui/image/qpixmap.cpp
+++ b/src/gui/image/qpixmap.cpp
@@ -923,6 +923,19 @@ bool QPixmap::loadFromData(const uchar *buf, uint len, const char *format, Qt::I
     return data->fromData(buf, len, format, flags);
 }
 
+bool QPixmap::loadFromAnimationData(const uchar *buf, uint len, uint frame, const char* format, Qt::ImageConversionFlags flags)
+{
+    if (len == 0 || buf == 0)
+        return false;
+
+    if (!data) {
+        data = QPixmapData::create(0, 0, QPixmapData::PixmapType);
+        data->setAnimationData(buf, len);
+    }
+
+    return data->fromAnimationData(frame);
+}
+
 /*!
     \fn bool QPixmap::loadFromData(const QByteArray &data, const char *format, Qt::ImageConversionFlags flags)
 
diff --git a/src/gui/image/qpixmap.h b/src/gui/image/qpixmap.h
index f5479e7..34bace6 100644
--- a/src/gui/image/qpixmap.h
+++ b/src/gui/image/qpixmap.h
@@ -147,6 +147,7 @@ public:
 
     bool load(const QString& fileName, const char *format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
     bool loadFromData(const uchar *buf, uint len, const char* format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
+    bool loadFromAnimationData(const uchar *buf, uint len, uint frame, const char* format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
     inline bool loadFromData(const QByteArray &data, const char* format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
     bool save(const QString& fileName, const char* format = 0, int quality = -1) const;
     bool save(QIODevice* device, const char* format = 0, int quality = -1) const;
diff --git a/src/gui/image/qpixmapdata.cpp b/src/gui/image/qpixmapdata.cpp
index 934dbb8..ea3ab44 100644
--- a/src/gui/image/qpixmapdata.cpp
+++ b/src/gui/image/qpixmapdata.cpp
@@ -151,6 +151,16 @@ bool QPixmapData::fromData(const uchar *buf, uint len, const char *format, Qt::I
     return !isNull();
 }
 
+bool QPixmapData::setAnimationData(const uchar *buffer, uint len)
+{
+    return false;
+}
+
+bool QPixmapData::fromAnimationData(uint offset)
+{
+    return false;
+}
+
 void QPixmapData::copy(const QPixmapData *data, const QRect &rect)
 {
     fromImage(data->toImage(rect), Qt::NoOpaqueDetection);
diff --git a/src/gui/image/qpixmapdata_p.h b/src/gui/image/qpixmapdata_p.h
index 960eb8f..3aa81f5 100644
--- a/src/gui/image/qpixmapdata_p.h
+++ b/src/gui/image/qpixmapdata_p.h
@@ -100,6 +100,9 @@ public:
     virtual bool fromData(const uchar *buffer, uint len, const char *format,
                           Qt::ImageConversionFlags flags);
 
+    virtual bool setAnimationData(const uchar *buffer, uint len);
+    virtual bool fromAnimationData(uint offset);
+
     virtual void copy(const QPixmapData *data, const QRect &rect);
     virtual bool scroll(int dx, int dy, const QRect &rect);
 
diff --git a/src/plugins/gfxdrivers/directfb/qdirectfbpaintdevice.cpp b/src/plugins/gfxdrivers/directfb/qdirectfbpaintdevice.cpp
index 90d0090..d066d60 100644
--- a/src/plugins/gfxdrivers/directfb/qdirectfbpaintdevice.cpp
+++ b/src/plugins/gfxdrivers/directfb/qdirectfbpaintdevice.cpp
@@ -48,7 +48,7 @@
 QT_BEGIN_NAMESPACE
 
 QDirectFBPaintDevice::QDirectFBPaintDevice(QDirectFBScreen *scr)
-    : QCustomRasterPaintDevice(0), dfbSurface(0), screen(scr),
+    : QCustomRasterPaintDevice(0), dfbSurface(0), dfbPalette(0), screen(scr),
       bpl(-1), lockFlgs(DFBSurfaceLockFlags(0)), mem(0), engine(0), imageFormat(QImage::Format_Invalid)
 {
 #ifdef QT_DIRECTFB_SUBSURFACE
@@ -64,9 +64,11 @@ QDirectFBPaintDevice::~QDirectFBPaintDevice()
 #ifdef QT_DIRECTFB_SUBSURFACE
         releaseSubSurface();
 #endif
-        if (dfbSurface) {
+        if (dfbPalette)
+            dfbPalette->Release(dfbPalette);
+
+        if (dfbSurface)
             screen->releaseDFBSurface(dfbSurface);
-        }
     }
     delete engine;
 }
diff --git a/src/plugins/gfxdrivers/directfb/qdirectfbpaintdevice.h b/src/plugins/gfxdrivers/directfb/qdirectfbpaintdevice.h
index 975954a..aca8f7d 100644
--- a/src/plugins/gfxdrivers/directfb/qdirectfbpaintdevice.h
+++ b/src/plugins/gfxdrivers/directfb/qdirectfbpaintdevice.h
@@ -85,6 +85,7 @@ protected:
     }
 
     IDirectFBSurface *dfbSurface;
+    IDirectFBPalette *dfbPalette;
 #ifdef QT_DIRECTFB_SUBSURFACE
     void releaseSubSurface();
     IDirectFBSurface *subSurface;
diff --git a/src/plugins/gfxdrivers/directfb/qdirectfbpixmap.cpp b/src/plugins/gfxdrivers/directfb/qdirectfbpixmap.cpp
index 58ffa48..1edd823 100644
--- a/src/plugins/gfxdrivers/directfb/qdirectfbpixmap.cpp
+++ b/src/plugins/gfxdrivers/directfb/qdirectfbpixmap.cpp
@@ -50,13 +50,12 @@
 #include <QtCore/qfile.h>
 #include <directfb.h>
 
-
 QT_BEGIN_NAMESPACE
 
 static int global_ser_no = 0;
 
 QDirectFBPixmapData::QDirectFBPixmapData(QDirectFBScreen *screen, PixelType pixelType)
-    : QPixmapData(pixelType, DirectFBClass), QDirectFBPaintDevice(screen),
+    : QPixmapData(pixelType, DirectFBClass), QDirectFBPaintDevice(screen), m_pVideoProvider(0),
       alpha(false)
 {
     setSerialNumber(0);
@@ -64,6 +63,8 @@ QDirectFBPixmapData::QDirectFBPixmapData(QDirectFBScreen *screen, PixelType pixe
 
 QDirectFBPixmapData::~QDirectFBPixmapData()
 {
+    if (m_pVideoProvider)
+        m_pVideoProvider->Release(m_pVideoProvider);
 }
 
 void QDirectFBPixmapData::resize(int width, int height)
@@ -293,6 +294,112 @@ bool QDirectFBPixmapData::fromDataBufferDescription(const DFBDataBufferDescripti
     return true;
 }
 
+bool QDirectFBPixmapData::setAnimationData(const uchar *buffer, uint len)
+{
+    DFBDataBufferDescription description;
+    description.flags = DBDESC_MEMORY;
+    description.memory.data = buffer;
+    description.memory.length = len;
+
+    IDirectFB *dfb = screen->dfb();
+    Q_ASSERT(dfb);
+    DFBResult result = DFB_OK;
+    IDirectFBDataBuffer *dataBufferPtr;
+    if ((result = dfb->CreateDataBuffer(dfb, &description, &dataBufferPtr)) != DFB_OK) {
+        DirectFBError("QDirectFBPixmapData::setAnimationData(): Can't create data buffer", result);
+        return false;
+    }
+    QDirectFBPointer<IDirectFBDataBuffer> dataBuffer(dataBufferPtr);
+
+    if (m_pVideoProvider)
+        m_pVideoProvider->Release(m_pVideoProvider);
+
+    if ((result = dataBuffer->CreateVideoProvider(dataBuffer.data(), &m_pVideoProvider)) != DFB_OK) {
+        DirectFBError("QDirectFBPixmapData::setAnimationData(): Can't create video provider", result);
+        return false;
+    }
+
+    return true;
+}
+
+extern "C" void qtDFBVideoFrameComplete(void* ctx)
+{
+    QDirectFBPixmapData* pQPixmapData = (QDirectFBPixmapData*)ctx;
+    pQPixmapData->m_animationSem.release();
+}
+
+bool QDirectFBPixmapData::fromAnimationData(uint offset)
+{
+    if (!m_pVideoProvider)
+        return false;
+
+    DFBResult result = DFB_OK;
+    DFBSurfaceDescription surfaceDescription;
+    if ((result = m_pVideoProvider->GetSurfaceDescription(m_pVideoProvider, &surfaceDescription)) != DFB_OK) {
+        DirectFBError("QDirectFBPixmapData::fromAnimationData(): Can't get surface description", result);
+        return false;
+    }
+
+    if (dfbPalette)
+        dfbPalette->Release(dfbPalette);
+    dfbPalette = 0;
+
+    if (dfbSurface)
+        screen->releaseDFBSurface(dfbSurface);
+    dfbSurface = 0;
+
+    // DSPF_LUT8 and DSPF_ARGB will enable a fast path when rendering
+    if (surfaceDescription.pixelformat != DSPF_LUT8)
+        surfaceDescription.pixelformat = DSPF_ARGB;
+
+    dfbSurface = screen->createDFBSurface(QSize(surfaceDescription.width, surfaceDescription.height),
+                                          surfaceDescription.pixelformat, QDirectFBScreen::TrackSurface, &result);
+
+    if (!dfbSurface) {
+        DirectFBError("QDirectFBPixmapData::fromAnimationData(): Can't create surface", result);
+        return false;
+    }
+
+    if (surfaceDescription.pixelformat == DSPF_LUT8) {
+        IDirectFB *dfb = screen->dfb();
+
+        DFBPaletteDescription desc;
+
+        memset(&desc, 0, sizeof(desc));
+
+        desc.flags = DPDESC_SIZE;
+        desc.size = 256;
+
+        dfb->CreatePalette(dfb,  &desc, &dfbPalette);
+        dfbSurface->SetPalette(dfbSurface, dfbPalette);
+    }
+
+    // Ask for a caller controlled frame decoding via DVPLAY_PACED
+    m_pVideoProvider->SetPlaybackFlags(m_pVideoProvider, (DFBVideoProviderPlaybackFlags)(DVPLAY_LOOPING | DVPLAY_PACED));
+
+    // Asynchronously render one frame and return
+    result = m_pVideoProvider->PlayTo(m_pVideoProvider, dfbSurface, NULL, qtDFBVideoFrameComplete, this);
+    if (result != DFB_OK) {
+        DirectFBError("QDirectFBPixmapData::fromAnimationData(): Can't render to surface", result);
+        return false;
+    }
+
+    // Wait up-to 1000 ms before considering a decode failure
+    bool ret = true;
+    if (!(ret = m_animationSem.tryAcquire(1, 1000)))
+        DirectFBError("QDirectFBPixmapData::fromAnimationData(): Couldn't receive frame completion event!", result);
+
+    if (!ret)
+        return false;
+
+    w = surfaceDescription.width;
+    h = surfaceDescription.height;
+    is_null = (w <= 0 || h <= 0);
+    d = QDirectFBScreen::depth(surfaceDescription.pixelformat);
+    setSerialNumber(++global_ser_no);
+
+    return true;
+}
 #endif
 
 void QDirectFBPixmapData::fromImage(const QImage &img, Qt::ImageConversionFlags flags)
@@ -344,12 +451,11 @@ void QDirectFBPixmapData::copy(const QPixmapData *data, const QRect &rect)
 #endif
     IDirectFBSurface *src = otherData->directFBSurface();
     alpha = data->hasAlphaChannel();
-    imageFormat = (alpha
-                   ? QDirectFBScreen::instance()->alphaPixmapFormat()
-                   : QDirectFBScreen::instance()->pixelFormat());
 
+    DFBSurfacePixelFormat fmt = DSPF_UNKNOWN;
+    src->GetPixelFormat(src, &fmt);
 
-    dfbSurface = screen->createDFBSurface(rect.size(), imageFormat,
+    dfbSurface = screen->createDFBSurface(rect.size(), fmt,
                                           QDirectFBScreen::TrackSurface);
     if (!dfbSurface) {
         qWarning("QDirectFBPixmapData::copy()");
@@ -357,6 +463,13 @@ void QDirectFBPixmapData::copy(const QPixmapData *data, const QRect &rect)
         return;
     }
 
+    if (DFB_PIXELFORMAT_IS_INDEXED(fmt) && otherData->dfbPalette) {
+        IDirectFBPalette *srcPalette = otherData->dfbPalette;
+
+        if (srcPalette->CreateCopy(srcPalette, &dfbPalette) == DFB_OK)
+            dfbSurface->SetPalette(dfbSurface, dfbPalette);
+    }
+
     if (alpha) {
         dfbSurface->Clear(dfbSurface, 0, 0, 0, 0);
         dfbSurface->SetPorterDuff(dfbSurface, DSPD_SRC_OVER);
diff --git a/src/plugins/gfxdrivers/directfb/qdirectfbpixmap.h b/src/plugins/gfxdrivers/directfb/qdirectfbpixmap.h
index bc94b42..72f776b 100644
--- a/src/plugins/gfxdrivers/directfb/qdirectfbpixmap.h
+++ b/src/plugins/gfxdrivers/directfb/qdirectfbpixmap.h
@@ -51,6 +51,8 @@
 #include "qdirectfbpaintdevice.h"
 #include <directfb.h>
 
+#include <QtCore/qsemaphore.h>
+
 QT_BEGIN_HEADER
 
 QT_BEGIN_NAMESPACE
@@ -59,6 +61,8 @@ QT_MODULE(Gui)
 
 class QDirectFBPaintEngine;
 
+extern "C" void qtDFBVideoFrameComplete(void* ctx);
+
 class QDirectFBPixmapData : public QPixmapData, public QDirectFBPaintDevice
 {
 public:
@@ -73,6 +77,8 @@ public:
                           Qt::ImageConversionFlags flags);
     virtual bool fromData(const uchar *buffer, uint len, const char *format,
                           Qt::ImageConversionFlags flags);
+    virtual bool setAnimationData(const uchar *buffer, uint len);
+    virtual bool fromAnimationData(uint offset);
 #endif
     virtual void copy(const QPixmapData *data, const QRect &rect);
     virtual void fill(const QColor &color);
@@ -91,6 +97,11 @@ public:
 private:
 #ifdef QT_DIRECTFB_IMAGEPROVIDER
     bool fromDataBufferDescription(const DFBDataBufferDescription &dataBuffer);
+
+    IDirectFBVideoProvider *m_pVideoProvider;
+
+    QSemaphore m_animationSem;
+    friend void qtDFBVideoFrameComplete(void* ctx);
 #endif
     void invalidate();
     bool alpha;
diff --git a/src/plugins/gfxdrivers/directfb/qdirectfbscreen.cpp b/src/plugins/gfxdrivers/directfb/qdirectfbscreen.cpp
index f56864a..a2d260c 100644
--- a/src/plugins/gfxdrivers/directfb/qdirectfbscreen.cpp
+++ b/src/plugins/gfxdrivers/directfb/qdirectfbscreen.cpp
@@ -271,6 +271,21 @@ IDirectFBSurface *QDirectFBScreen::createDFBSurface(const QSize &size,
     return createDFBSurface(desc, options, result);
 }
 
+IDirectFBSurface *QDirectFBScreen::createDFBSurface(const QSize &size,
+                                                    DFBSurfacePixelFormat format,
+                                                    SurfaceCreationOptions options,
+                                                    DFBResult *result)
+{
+    DFBSurfaceDescription desc;
+    memset(&desc, 0, sizeof(DFBSurfaceDescription));
+    desc.flags |= DSDESC_WIDTH|DSDESC_HEIGHT|DSDESC_PIXELFORMAT|DSDESC_CAPS;
+    desc.caps = DSCAPS_VIDEOONLY;
+    desc.width = size.width();
+    desc.height = size.height();
+    desc.pixelformat = format;
+    return createDFBSurface(desc, options, result);
+}
+
 IDirectFBSurface *QDirectFBScreen::createDFBSurface(DFBSurfaceDescription desc, SurfaceCreationOptions options, DFBResult *resultPtr)
 {
     DFBResult tmp;
diff --git a/src/plugins/gfxdrivers/directfb/qdirectfbscreen.h b/src/plugins/gfxdrivers/directfb/qdirectfbscreen.h
index afc153b..b1c42bc 100644
--- a/src/plugins/gfxdrivers/directfb/qdirectfbscreen.h
+++ b/src/plugins/gfxdrivers/directfb/qdirectfbscreen.h
@@ -198,6 +198,10 @@ public:
                                        QImage::Format format,
                                        SurfaceCreationOptions options,
                                        DFBResult *result = 0);
+    IDirectFBSurface *createDFBSurface(const QSize &size,
+                                       DFBSurfacePixelFormat format,
+                                       SurfaceCreationOptions options,
+                                       DFBResult *result = 0);
     IDirectFBSurface *copyDFBSurface(IDirectFBSurface *src,
                                      QImage::Format format,
                                      SurfaceCreationOptions options,
